name: git-pr-release-backport
on:
  pull_request:
    branches:
      - main
      - release
      - patch
    types: [closed]

jobs:
  git-pr-release:
    # 1. main ブランチに hotfix もしくは release ブランチからの PR がマージされた場合： main to release
    # 2. release ブランチに main ブランチからの PR がマージされた場合： release to patch
    # 3. patch ブランチに release ブランチからの PR がマージされた場合： patch to develop
    if: github.event.pull_request.merged == true && ((github.base_ref == 'main' && (github.head_ref == 'release' || github.head_ref == 'hotfix')) || (github.base_ref == 'release' && github.head_ref != 'main') || (github.base_ref == 'patch' && github.head_ref == 'release'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # git-pr-release needs the git histories
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
      - name: Install git-pr-release
        run: gem install --no-document git-pr-release --version 2.2.0
      - name: Update git config
        run: git config --global --add safe.directory "$(pwd)"
      - name: Create PR
        run: git-pr-release
        env:
          GIT_PR_RELEASE_TOKEN: ${{ secrets.PAT }}
          GIT_PR_RELEASE_BRANCH_PRODUCTION: ${{
            github.base_ref == 'main' && 'release' ||
            github.base_ref == 'release' && 'patch' ||
            github.base_ref == 'patch' && 'develop'
            }}
          GIT_PR_RELEASE_BRANCH_STAGING: ${{ github.base_ref }}
          GIT_PR_RELEASE_LABELS: release
          GIT_PR_RELEASE_TEMPLATE: .github/PR_RELEASE_TEMPLATE_BACKPORT.erb
